# -*- coding: utf-8 -*-
"""TensorFlow + Keras.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rKX-6ccSy6_E2swuTu0YxI4wOsuGiWMI
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
print(f"tensorflow: {tf.__version__}")

import matplotlib.pyplot as plt
import numpy as np
import random

"""#1. LOAD DATA"""

(X_train, y_train) , (X_test, y_test) =  keras.datasets.fashion_mnist.load_data()

type(X_train), type(y_train)

X_train.shape, y_train.shape

"""cấu trúc của x train kiểu int"""

X_train.dtype

class_name = ["T-shirt", "trouser", "PullOver", "Dress","Coat", "Sandan",
              "Shirt",  "Sneaker", "Bag", "Anker Boot"]
class_num = len(class_name)
class_name[y_train[0]]

plt.imshow(X_train[0])

"""hàm in ra ngẫu nhiên 8 ảnh trong tập train
gôm 2 hàng 4 cột -> 8 phần tử
len_x là lấy ra chiều dài phần tử, trong trường hợp này là 60000
dùng vòng for duyệt qua ncol và nrow  và in ra
"""

def plt_data(x_data: np.ndarray,y_data: np.ndarray) -> None:
  nrow, ncol = 2,4
  fig, axes = plt.subplots(nrow, ncol, figsize = (8, 4))
  len_x = x_data.shape[0]
  for idx in range (nrow* ncol):
    ax = axes[idx // ncol, idx % ncol]
    img_idx = random.randint(0, len_x)
    ax.imshow(x_data[img_idx], cmap = 'gray')
    #xóa các chữ số
    ax.set(xticks=[], yticks=[])
    #in ra gọn hơn
    #lấy tên của nhãn tương ứng
    true_labe_str = f"True: {class_name[y_data[img_idx]]}"
    ax.set_xlabel(true_labe_str, color = 'green', fontsize = 12)

  plt.tight_layout()
  plt.show()

plt_data(X_train, y_train)

"""#2.Image -preprocessing
chuyển các ảnh từ 0-255 thành 0-1

chuyển data từ int sang float

"""

X_train = X_train.astype(np.float32) / 255
X_test = X_test.astype(np.float32) / 255

X_train.shape, X_test.dtype

"""X_train ở trên đang là 3 kênh, 60000 bức ảnh, chiều rộng 28, dài 28, nhưng train cần 4 kênh, thêm kênh màu nữa

"""

X_train = np.expand_dims(X_train, axis=-1)
X_test = np.expand_dims(X_test, axis=-1)

X_train.shape, X_test.shape

"""Chuyển lable từ dạng 0,1,2,3,4... sang dạng mảng
ví dụ số 7 là [0,0,0,0,0,0,0,1,0,0,0]
"""

y_train_label = keras.utils.to_categorical(y_train, class_num)
y_test_label = keras.utils.to_categorical(y_test, class_num)

#test sau khi chuyển sang mảng
y_train[0], y_train_label[0]

"""#3. Triển khai ANN

"""

input_shape = (28,28,1)

model = keras.models.Sequential([
    layers.Flatten(input_shape = input_shape), #chuyển mảng từ [28,28,1] thành 28*28*1 = 784
    layers.Dense(512, activation='relu'),
    layers.Dense(256, activation='relu'),
    layers.Dense(class_num, activation='softmax')
])
model.summary()

model.compile(optimizer='rmsprop',
              loss='categorical_crossentropy',
              metrics='accuracy'
              )

epochs=10
batch_size = 128
history = model.fit(X_train, y_train_label,
          epochs = epochs,
          batch_size = batch_size,
          validation_split = 0.1)

history_dict = history.history

history_dict.keys()

train_loss, val_loss = history_dict['loss'], history_dict['val_loss']
accuracy, val_accuracy = history_dict['accuracy'], history_dict['val_accuracy']

fig, (ax1, ax2) = plt.subplots(1,2,figsize = (15,5))
epoch_runs = [i+1 for i in range(epochs)]

ax1.plot(epoch_runs, train_loss, label='trainng loss')
ax1.plot(epoch_runs, val_loss, label='val loss', marker = 'o')
ax1.set(title='training loss', xlabel='epoch', ylabel='loss')
ax1.legend() #hiển thị ghi chú góc trên bên trái



ax2.plot(epoch_runs, accuracy, label='acurracy')
ax2.plot(epoch_runs, val_accuracy, label='val_accuracy', marker = 'o')
ax2.set(title='Accuracy', xlabel='epoch', ylabel='accuracy')
ax2.legend() #hiển thị ghi chú góc trên bên phải


plt.show()

"""#4.Model Evaluation"""

score = model.evaluate(X_test, y_test_label)

print(f"test los: {score[0]:.4f}")
print(f"test accuracy: {score[1]:.4f}")

"""#5. predict

lấy ra 3 phần tử để test
"""

X_example = X_test[0:3]
y_pre = model.predict(X_example)

"""hiển thị sau khi dự đoán, nhưng nó vẫn ở dạng mảng"""

y_pre

y_pre.round(3)

prediction = np.argmax(y_pre, axis = 1)
prediction

[class_name[pred] for pred in prediction]

y_pre = model.predict(X_test)

from typing import Optional
def plt_show(x_data: np.ndarray, y_data: np.ndarray, y_pre: Optional[np.ndarray] = None) -> None:
    nrow, ncol = 2, 4
    fig, axes = plt.subplots(nrow, ncol, figsize=(8, 4))
    len_x = x_data.shape[0]

    for idx in range(nrow * ncol):
        ax = axes[idx // ncol, idx % ncol]
        img_idx = random.randint(0, len_x - 1)  # Đảm bảo chỉ số nằm trong giới hạn
        ax.imshow(x_data[img_idx], cmap='gray')
        ax.set(xticks=[], yticks=[])  # Xóa các ticks

        color = 'green'
        true_label_str = f"Đúng: {class_name[y_data[img_idx]]}"

        predicted_label_str = ""
        if y_pre is not None:
            predicted_idx = np.argmax(y_pre[img_idx])
            prediction_label = class_name[predicted_idx]
            color = 'red' if predicted_idx != y_data[img_idx] else color
            predicted_label_str = f", Dự đoán: {prediction_label}"

        img_title = true_label_str + predicted_label_str
        ax.set_xlabel(img_title, color=color, fontsize=12)

    plt.tight_layout()
    plt.show()

# Sử dụng ví dụ (đảm bảo bạn đã định nghĩa class_name, X_test, y_test và y_pre đúng cách)
# plt_show(X_test, y_test, y_pre)

plt_show(X_test, y_test, y_pre)